name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  model-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate embedding model
      run: |
        python -c "
        from sentence_transformers import SentenceTransformer
        model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
        test_embedding = model.encode(['test sentence'])
        assert test_embedding.shape[0] == 384, 'Embedding dimension mismatch'
        print('✅ Embedding model validation passed')
        "
    
    - name: Test ChromaDB functionality
      run: |
        python -c "
        import chromadb
        import tempfile
        import os
        with tempfile.TemporaryDirectory() as tmpdir:
            client = chromadb.PersistentClient(path=tmpdir)
            collection = client.create_collection('test')
            collection.add(
                documents=['test document'],
                ids=['test_id'],
                embeddings=[[0.1] * 384]
            )
            results = collection.query(query_embeddings=[[0.1] * 384], n_results=1)
            assert len(results['documents'][0]) == 1, 'ChromaDB query failed'
            print('✅ ChromaDB validation passed')
        "

  notebook-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nbformat nbconvert jupyter
    
    - name: Validate notebook structure
      run: |
        python -c "
        import nbformat
        import os
        
        notebooks = [
            'notebooks/01_data_exploration.ipynb',
            'notebooks/02_embedding_creation.ipynb', 
            'notebooks/03_rag_implementation.ipynb',
            'notebooks/04_interactive_interface.ipynb'
        ]
        
        for notebook_path in notebooks:
            if os.path.exists(notebook_path):
                with open(notebook_path, 'r') as f:
                    nb = nbformat.read(f, as_version=4)
                    assert len(nb.cells) > 0, f'Empty notebook: {notebook_path}'
                    print(f'✅ {notebook_path} validation passed')
            else:
                print(f'⚠️ {notebook_path} not found')
        "

  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
    
    - name: Build documentation
      run: |
        # Create basic mkdocs.yml if it doesn't exist
        if [ ! -f mkdocs.yml ]; then
          cat > mkdocs.yml << EOF
        site_name: CrediTrust RAG System
        theme:
          name: material
          palette:
            primary: blue
            accent: light-blue
        nav:
          - Home: index.md
          - Installation: installation.md
          - Usage: usage.md
          - API Reference: api.md
        plugins:
          - search
          - mermaid2
        EOF
        fi
        
        # Create docs directory and basic content
        mkdir -p docs
        cp README.md docs/index.md
        
        # Build docs
        mkdocs build
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
